@page "/vehiclepost/{postId:int?}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject listPostUseCase listPostUseCase
@inject vehicleListUseCase vehicleListUseCase
@inject userListUseCase userListUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject NavigationManager Navegador
@rendermode InteractiveServer

@if (actualPost != null && actualVehicle != null) { // parece que sin este if estaban habiendo problemas para cargar la pagina a veces (como que renderizaba antes de que es hayan conseguido las variables)
  <div class="ship-post-container">
    <div class="ship-post">
      <div class="carousel-container">
        <div id="carousel" class="carousel slide">
          <div class="carousel-inner">
            <div class="carousel-item active">
              <img class="ship-post-img" src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))"
              height="450px" width="100%" style="object-fit: cover;"/>
            </div>
          </div>
          <button class="carousel-control-prev" type="button" @onclick=MoveLeft>
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button class="carousel-control-next" type="button" @onclick=MoveRight>
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>
      </div>
      <h2 class="ship-post-title">@actualPost.Title</h2>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <i class='bx bxs-ship icon'></i>
          <h5>Tipo:  @actualVehicle.type</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <i class='bx bxs-ship icon'></i>
          <h5>Modelo:  @actualVehicle.model</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <i class='bx bxs-ship icon'></i>
          <h5>Kilometros:  @actualVehicle.kms</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <i class='bx bxs-ship icon'></i>
          <h5>Puertas:  @actualVehicle.doors</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <i class='bx bxs-ship icon'></i>
          <h5>Patente:  @actualVehicle.plate</h5>
        </div>
      </div>
      <p class="ship-post-description">@actualVehicle.description</p>
      <hr>
      @if((loggedUserId != 0) && (!isOwner)){
        <button class="btn btn-primary" @onclick="Ofertar" data-bs-toggle="modal" data-bs-target="#listarBarcosModal">Ofertar</button>
      }
      @if (isOwner) {
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#listarOfertasModal">View Offers</button>
      }
    </div>
  </div>
}

<ListarBarcosAOfertar @ref="listarBarcos" />
<ListarOfertasAPost @ref="listarOfertas" />

@code {
  [Parameter] public int? postId { get; set; }
  bool isOwner = false;
  Post actualPost;
  Vehicle actualVehicle = new Vehicle();

  ListarBarcosAOfertar listarBarcos = null!;
  ListarOfertasAPost listarOfertas = null!;

  List<byte[]> images = new List<byte[]>(); // para las imagenes del post
  int limit = 0;  	  // para manejar el cap de imagenes
  int i = 0;
  int loggedUserId = 0;
  

  protected override async void OnInitialized() {
    //Extrae el ID del usuario loggeado del sessionStorage
    var getLoggedUserId = await sessionStorage.GetAsync<int>("userId");
    loggedUserId = getLoggedUserId.Success ? getLoggedUserId.Value : 0;
    
    images.Add(new byte[0]);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      //Busco al owner del post
      actualPost = await Task.Run(() => listPostUseCase.Execute().Find(post => post.Id == postId));
      if (actualPost != null) {
        actualVehicle = await Task.Run(() => vehicleListUseCase.Execute().Find(vehicle => vehicle.Id == actualPost.getTransportId()));
        if (actualVehicle != null) {
          User owner = await Task.Run(() => userListUseCase.Execute().Find(user => user.Id == actualVehicle.UserId));
            
          //Checkeo si el owner y el usuario loggeado son el mismo user y guardo el resultado
          isOwner = owner.Id == loggedUserId;

          GetImages();
          
          // le aviso a blazor que se tiene que re-renderizar la pagina
          StateHasChanged();
        }
      }
    }
  }

  private async Task Ofertar() {
      listarBarcos.Cargar();
  }

  private void GetImages() {
    images = new List<byte[]>();
    var vehicleImages = listVehicleImagesUseCase.Execute().Where(img => img.VehicleId == actualVehicle.Id);
    if (vehicleImages != null) {
      foreach (var img in vehicleImages) {
        images.Add(img.Image);
      }

      limit = images.Count() - 1;
    }
  }

  public void MoveRight() {  // para moverse por el slider de imagenes
    if (i < limit) i++;
    else i = 0;

    StateHasChanged();
  }

  public void MoveLeft() {  // para moverse por el slider de imagenes
    if (i > 0) i--;
    else i = limit;

    StateHasChanged();
  }

}
