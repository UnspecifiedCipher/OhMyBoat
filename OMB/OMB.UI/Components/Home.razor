@page "/"
@rendermode InteractiveServer
@inject NavigationManager navegador
@inject listPostUseCase listPostUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject userListUseCase userListUseCase
@inject shipListUseCase shipListUseCase
@inject vehicleListUseCase vehicleListUseCase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@using System.Net
@using System.Net.Mail

<DialogoError @ref=dialogo/>

@if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
    <div class="alert alert-info">
        @cartelito
        <button class="btn" @onclick="() => setFalse()" >
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
        </button>
    </div>
}
@if(posts.Count() == 0){
        <h1 class="publicaciones-title">No hay publicaciones disponibles aún</h1>
    }
else{
<!--<div class="container-de-containers">-->
<div class="publicaciones-container">
    
    <h1 class="publicaciones-title">Publicaciones</h1>
    @{ int i = 0; } @* Lo uso para iterar sobre las fotos *@
    @foreach (var p in posts){
        <div class="publicacion" @onclick="async () => await browseToPost(p)">

            <div class="img">
                <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(postToImage[p]))"/>
            </div>
            <div class="publicacion-info">
                <h3>@p.getTitle()</h3>
                <h6>@postToDescription[p]</h6>
            </div>
        </div>
        i++; @* Incremento i para seguir iterando *@
    }
</div>
<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"><button class="btn btn-danger">Borrar Base de Datos (No toques!!)</button></a>
<!--
    <div class="cuadradito">
        <button class="botoncito-de-decoracion"> Aquí estarán los filtros de busqueda en un futuro. </button>
        <button @onclick="SendEmail">Enviar Mail</button>
    </div>
</div>-->
}
@code {
    List<Post> posts = new List<Post>();
    List<Ship> ships = new List<Ship>();
    List<Vehicle> vehicles = new List<Vehicle>();
    List<User> users = new List<User>();

    List<ShipImage> shipImages = new List<ShipImage>();
    List<VehicleImage> vehicleImages = new List<VehicleImage>();
    Dictionary<Post, byte[]> postToImage = new Dictionary<Post, byte[]>();
    Dictionary<Post, string> postToDescription = new Dictionary<Post, string>();

    DialogoError dialogo = null!;
    string? cartelito;
    bool mostrarCartel;

    protected override async Task OnInitializedAsync() {
        // Llamo solo una vez a los listUseCase
        ships = shipListUseCase.Execute();
        vehicles = vehicleListUseCase.Execute();
        users = userListUseCase.Execute();
        List<Transport> transports = new List<Transport>();
        transports.AddRange(vehicles);
        transports.AddRange(ships);

        posts = listPostUseCase.Execute();
        shipImages = listShipImagesUseCase.Execute();
        vehicleImages = listVehicleImagesUseCase.Execute();

        // Sacamos los posts de las personas baneadas
        posts.RemoveAll(p => 
            null != users.Where(u => 
                u.banned && (transports.Where(t => 
                    (t.Id == p.getTransportId())).Count() != 0 && (u.Id == transports.Where(t => 
                        t.Id == p.getTransportId()).SingleOrDefault().UserId))).SingleOrDefault());
        // Reordenamos los posts
        posts = posts.OrderBy(_ => Guid.NewGuid()).ToList();

        // Generamos la lista de fotos para ambos tipos de post
        // Generamos la lista de descripciones
        foreach (var post in posts) {
            string descripcion = transports.Find(T => T.Id == post.getTransportId()).description;
            byte[]? image = (null != shipImages.Where(imagen => imagen.ShipId == post.getTransportId()).SingleOrDefault()) ? shipImages.Where(imagen => imagen.ShipId == post.getTransportId()).SingleOrDefault().Image : image = vehicleImages.Find(imagen => imagen.VehicleId == post.getTransportId()).Image;;

            postToImage[post] = image;
            postToDescription[post] = descripcion;
        }

        var result  = await sessionStorage.GetAsync<string>("cartel?");
        cartelito = result.Success ? result.Value : null;
        mostrarCartel = true;
        await sessionStorage.DeleteAsync("cartel?");
    }

    private void setFalse () {
        this.mostrarCartel = false;
    }

    private async Task browseToPost(Post p) {
        try {
            if (ships != null && ships.Where(s => s.Id == p.TransportId).SingleOrDefault() != null) {
                navegador.NavigateTo("/shippost/" + p.getTransportId(), true);
            } else {
                if (vehicles != null && vehicles.Where(v => v.Id == p.TransportId).SingleOrDefault() != null) {
                    navegador.NavigateTo("/vehiclepost/" + p.getTransportId(), true);
                }
            }
        }
        catch (TaskCanceledException) {
            // Retry navigation if it fails due to a TaskCanceledException (un error bastante raro)
            await Task.Delay(500); // Wait half a sec before trying again
            await browseToPost(p); // Retry navigation
        }
    }
}
